name: Release
on:
  release:
    branches: [ main ]
    types:
      - created

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: llg
            asset_name: llg_linux_amd64
          - os: windows-latest
            artifact_name: llg.exe
            asset_name: llg_windows_amd64

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub
        uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: ${{secrets.GIT_TOKEN}}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Node install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Node build
        working-directory: ./frontend
        run: |
          npm run build
          mkdir -p ../${{ matrix.asset_name }} && cp -r dist ../${{ matrix.asset_name }}/dist

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"
          cache-dependency-path: "./backend/go.sum"

      - name: Go get
        working-directory: ./backend
        run: go mod download

      - name: Go build
        working-directory: ./backend
        env:
          CGO_ENABLED: 0
        run: |
          go build -o ${{ matrix.artifact_name }} -ldflags="-X github.com/czQery/llg/tl.Build=${{ github.event.release.tag_name }}"
          cp -r ${{ matrix.artifact_name }} ../${{ matrix.asset_name }}
          cp .config.json ../${{ matrix.asset_name }}/config.json

      - name: Compress release - zip
        if: startsWith(runner.os, 'windows')
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: "zip"
          path: ${{ matrix.asset_name }}/
          filename: "${{ matrix.asset_name }}.zip"

      - name: Compress release - tar
        if: startsWith(runner.os, 'linux')
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: "tar"
          path: ${{ matrix.asset_name }}/
          filename: "${{ matrix.asset_name }}.tar.gz"

      - name: Upload release - zip
        if: startsWith(runner.os, 'windows')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "${{ matrix.asset_name }}.zip"
          asset_name: "${{ matrix.asset_name }}.zip"
          tag: ${{ github.ref }}

      - name: Upload release - tar
        if: startsWith(runner.os, 'linux')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "${{ matrix.asset_name }}.tar.gz"
          asset_name: "${{ matrix.asset_name }}.tar.gz"
          tag: ${{ github.ref }}

      - name: Set up QEMU
        if: startsWith(runner.os, 'linux')
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: startsWith(runner.os, 'linux')
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: startsWith(runner.os, 'linux')
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Extract metadata (tags, labels) for Docker
        if: startsWith(runner.os, 'linux')
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push docker image
        if: startsWith(runner.os, 'linux')
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}